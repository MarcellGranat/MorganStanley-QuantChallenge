---
title: Results
author: Marcell Granat & Balint Mazzag
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
toc: true
theme:
  light: flatly
  dark: darkly
date: last-modified
editor_options: 
  chunk_output_type: console
execute: 
  echo: true
  fig-dpi: 400
  error: true
  cache: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

source("00-utils.R")
source("00-board.R")
```

```{r}
#| label: import 

.read(daily_weather_df, minnesota_county_location_df, minnesota_production_df, minnesota_station_location_df, prediction_targets_df)
```

```{r}
#| label: fig-map
distance_df |> 
  left_join(
    minnesota_county_location_df |> 
      usmap::usmap_transform(
        input_names = c("longitude", "latitude"),
        output_names = c("county_longitude", "county_latitude")
      ) |> 
      select(- longitude, - latitude),
    by = join_by(county)
  ) |> 
  left_join(
    minnesota_station_location_df |> 
      usmap::usmap_transform(
        input_names = c("longitude", "latitude"),
        output_names = c("station_longitude", "station_latitude")
      ) |> 
      select(- longitude, - latitude), 
    by = join_by(station == code)
  ) |> 
  mutate(county = ifelse(duplicated(county), NA, county)) |> 
  ggplot() + 
  geom_polygon(data = usmap::us_map(regions = "counties") |> 
                 filter(full == "Minnesota"), 
               aes(x = x, y =y,  group = group), 
               color = 'black', 
               fill = "midnightblue", 
               alpha = .2) +
  geom_point(aes(county_longitude, county_latitude, label = county), 
             fill = "red", shape = 21, color = "black") + 
  geom_point(aes(station_longitude, station_latitude), color = "blue2", size = .4) +
  labs(
    x = NULL, y = NULL
  ) + 
  theme(
    axis.text = element_blank()
  )
```

```{r}
#| label: fig-trend-yield

minnesota_production_df |> 
  filter(crop == "CORN, GRAIN", county != "OTHER (COMBINED) COUNTIES") |> 
  ggplot() + 
  geom_line(aes(year, yield, group = county), show.legend = FALSE, alpha = .3) + 
  geom_smooth(mapping = aes(year, yield, color = "Fitted line with OLS"), method = "lm") +
  labs(
    y = "Yield (Bu / Acr)",
    x = NULL,
    color = NULL
  )
```

```{r}
#| label: fig-trend-acres

minnesota_production_df |> 
  filter(crop == "CORN, GRAIN", county != "OTHER (COMBINED) COUNTIES") |> 
  group_by(year) |> 
  summarise(acres = sum(acres, na.rm = TRUE)) |> 
  ggplot() + 
  geom_line(aes(year, acres), show.legend = FALSE) +
  scale_y_continuous(labels = scales::number) +
  labs(
    y = "Total of harvested acres in all counties",
    x = NULL,
    color = NULL
  )
```

```{r}
#| label: fig-missingness

daily_weather_df |> 
  filter(time > "2010-01-01") |> 
  mutate(
    avg_temp = (min_temp + max_temp) / 2
  ) |> 
  sample_n(1000) |> 
  visdat::vis_miss()
```

```{r}
prediction_targets_df |> 
  sample_n(1000) |> 
  visdat::vis_miss()
```

```{r}
#| label: fig-impute-w-avg

daily_weather_df |> 
  ggplot() + 
  aes((min_temp + max_temp) / 2, avg_temp) + 
  geom_point(alpha = .2)
```

```{r}
weather_design_df |> 
  count(year, sort = TRUE)
```

```{r}
load("model-setup.RData")

df <- rec |> 
  prep() |> 
  pluck("template")

df |> 
  ungroup() |> 
  select(- year) |> 
  slice(1) |> 
  pivot_longer(everything()) |> 
  mutate(
    day = str_extract(name, "\\d{1,2}-\\d{1,2}"),
    day = str_c("2023-", day),
    day = lubridate::ymd(day),
    variable = str_remove(name, "_\\d{1,2}-\\d{1,2}"),
    selected = TRUE
  ) |> 
  filter(variable != "yield") |> 
  (\(x) {
    crossing(
      variable = x$variable,
      day = seq.Date(from = as.Date("2023-01-01"), to = as.Date("2023-12-31"), by = "days")
    ) |> 
      left_join(x)
  }) () |> 
  mutate(selected = ifelse(!is.na(selected), selected, FALSE)) |> 
  ggplot() + 
  aes(day, variable, fill = selected) + 
  geom_tile() + 
  scale_x_date(date_labels = "%b", date_breaks = "month", expand = c(0, 0)) + 
  scale_fill_manual(values = c("grey", "red3"))
```

```{r}
tuning_rs_l <- list.files("tuning", full.names = TRUE) |> 
  setdiff("tuning/linear_reg_lm.rds") |> 
  map(read_rds) |> 
  map(2) |> 
  map2(c("xgboost", "lasso", "randomforest", "svm"), ~ mutate(.x, model = .y))

tuning_rs_l |> 
  crossing(
    metric = c("rsq", "rmse", "msd", "mape")
  ) |> 
  mutate(
    best = map2(tuning_rs_l, metric, ~ show_best(.x, metric = .y, n = 1)),
    rs = map2(tuning_rs_l, best, \(x, y) {
      best_l <- y |> 
        select(- .metric, - mean, - std_err, - .estimator, - n, - .config, - model) |> 
        imap_chr(~ paste0(.y, " = ", ifelse(is.na(round(as.numeric(.x), 3)), .x, round(as.numeric(.x), 3)))) |> 
        str_flatten(", ")
      
      x |> 
        select(id, .metrics) |> 
        unnest(.metrics) |> 
        inner_join(
          y |> 
            select(- any_of(c(".estimator", "n", ".config")))
        ) |> 
        select(id, .estimate, mean, std_err) |> 
        mutate(best_l, model = x$model[1])
    })
  ) |> 
  select(metric, rs) |> 
  unnest(rs) |> 
  group_by(metric) |> 
  mutate(label_y = max(.estimate)) |> 
  group_by(metric, model) |> 
  mutate(label_y = c(label_y[1], rep(NA, n() - 1))) |> 
  ggplot() + 
  facet_grid(metric ~ model, scales = "free_y") + 
  geom_line(aes(as.numeric(id), .estimate)) +
  geom_point(aes(as.numeric(id), .estimate)) + 
  geom_line(aes(as.numeric(id), mean), lty = 2) + 
  geom_ribbon(
    aes(as.numeric(id), ymin = mean - qnorm(.975) * std_err, ymax = mean + qnorm(.975) * std_err),
    alpha = .3
  ) + 
  geom_text(
    aes(x = 1960, y = label_y * 1.1, label = str_wrap(best_l, 50)),
    color = "grey10",
    size = 1.5,
    hjust = 0,
    vjust = 1
  ) +
  labs(
    x = "Assessment year"
  ) + 
  scale_x_continuous(n.breaks = 4) +
  theme_bw()
```

```{r}
tuning_rs_l <- list.files("past", full.names = TRUE) |> 
  setdiff("past/linear_reg_lm.rds") |> 
  map(read_rds) |> 
  map(2) |> 
  map2(c("xgboost", "lasso", "randomforest", "svm"), ~ mutate(.x, model = .y))

tuning_rs_l |> 
  crossing(
    metric = c("rsq", "rmse", "msd", "mape")
  ) |> 
  mutate(
    best = map2(tuning_rs_l, metric, ~ show_best(.x, metric = .y, n = 1)),
    rs = map2(tuning_rs_l, best, \(x, y) {
      best_l <- y |> 
        select(- .metric, - mean, - std_err, - .estimator, - n, - .config, - model) |> 
        imap_chr(~ paste0(.y, " = ", ifelse(is.na(round(as.numeric(.x), 3)), .x, round(as.numeric(.x), 3)))) |> 
        str_flatten(", ")
      
      x |> 
        select(id, .metrics) |> 
        unnest(.metrics) |> 
        inner_join(
          y |> 
            select(- any_of(c(".estimator", "n", ".config")))
        ) |> 
        select(id, .estimate, mean, std_err) |> 
        mutate(best_l, model = x$model[1])
    })
  ) |> 
  select(metric, rs) |> 
  unnest(rs) |> 
  group_by(metric) |> 
  mutate(label_y = max(.estimate)) |> 
  group_by(metric, model) |> 
  mutate(label_y = c(label_y[1], rep(NA, n() - 1))) |> 
  ggplot() + 
  facet_grid(metric ~ model, scales = "free_y") + 
  geom_line(aes(as.numeric(id), .estimate)) +
  geom_point(aes(as.numeric(id), .estimate)) + 
  geom_line(aes(as.numeric(id), mean), lty = 2) + 
  geom_ribbon(
    aes(as.numeric(id), ymin = mean - qnorm(.975) * std_err, ymax = mean + qnorm(.975) * std_err),
    alpha = .3
  ) + 
  geom_text(
    aes(x = 1960, y = label_y * 1.1, label = str_wrap(best_l, 50)),
    color = "grey10",
    size = 1.5,
    hjust = 0,
    vjust = 1
  ) +
  labs(
    x = "Assessment year"
  ) + 
  scale_x_continuous(n.breaks = 4) +
  theme_bw()
```

```{r}
daily_weather_df |> 
  mutate(
    year = lubridate::year(time)
  ) |> 
  group_by(year) |> 
  summarise_at(3:6, ~ mean(., na.rm = TRUE)) |> 
  filter(year > 2005) |> 
  pivot_longer(- 1) |> 
  ggplot() + 
  facet_wrap(~ name) +
  geom_line(aes(year, value))
```

```{r}
s_wf |> 
  add_model(
    linear_reg() %>%
      set_engine('lm')
  ) |> 
  fit(
    create_testing_rset(p_data = FALSE, case_wts = FALSE) |> 
    filter(id == 2016) |> 
    pull(splits) |> 
    first() |> 
    analysis()
  ) |> 
  broom::tidy()
```

```{r}
.read(weighted_rs, unweighted_rs, ensemble_rs)
```

```{r}
bind_rows(
  weighted_rs,
  unweighted_rs,
  ensemble_rs
) |> 
  filter(.metric == "rmse") |> 
  mutate(ensemble = str_detect(model, "ensemble")) |> 
  ggplot() + 
  aes(as.numeric(id), .estimate, color = model) + 
  facet_wrap(~ ensemble) +
  geom_line() + 
  geom_point()
```

```{r}
bind_rows(
  weighted_rs,
  unweighted_rs,
  ensemble_rs
) |> 
  filter(.metric == "rmse") |> 
  group_by(model) |> 
  summarise(
    rmse = mean(.estimate),
    std_err = sd(.estimate)
  ) |> 
  arrange(rmse)
```


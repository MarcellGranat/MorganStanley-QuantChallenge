---
title: Results
author: Marcell Granat & Balint Mazzag
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
toc: true
theme:
  light: flatly
  dark: darkly
date: last-modified
editor_options: 
  chunk_output_type: console
execute: 
  echo: true
  fig-dpi: 400
  error: true
  cache: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

source("00-utils.R")
source("00-board.R")
```

```{r}
#| label: import 

.read(daily_weather_df, minnesota_county_location_df, minnesota_production_df, minnesota_station_location_df, prediction_targets_df)

.read(distance_df)
.read(station_to_county)
.read(testing_rs_75, testing_rs_90, testing_rs_95, testing_rs_no_wts)
.read(ensemble_dropsvm_rs, ensemble_svm_rs)

.read(linear_reg_lm_no_wts_wf, rand_forest_ranger_no_wts_wf,
      weekly_svm_linear_LiblineaR_wf, weekly_boost_tree_lightgbm_wf, 
      linear_reg_glmnet_90_wf, mars_earth_no_wts_wf)

.read(ensemble_linear_reg_glmnet_wf, ensemble_linear_reg_lm_wf, ensemble_mars_earth_wf, 
      ensemble_dropSVM_linear_reg_glmnet_wf, 
      ensemble_dropSVM_linear_reg_lm_wf, ensemble_dropSVM_mars_earth_wf)
```

```{r}
nicename <- function(x) {
  str_replace_all(x, c(
    "glmnet" = "LASSO",
    "lm" = "OLS",
    "ranger" = "Random forest",
    "LiblineaR" = "Linear SVM",
    "earth" = "MARS",
    "lightgbm" = "LightGBM"
  ))
}
```

```{r}
#| label: fig-map

p1 <- station_to_county |> 
  filter(time == "1950-01-01") |> 
  left_join(
    minnesota_county_location_df |> 
      usmap::usmap_transform(
        input_names = c("longitude", "latitude"),
        output_names = c("county_longitude", "county_latitude")
      ) |> 
      select(- longitude, - latitude),
    by = join_by(county)
  ) |> 
  left_join(
    minnesota_station_location_df |> 
      usmap::usmap_transform(
        input_names = c("longitude", "latitude"),
        output_names = c("station_longitude", "station_latitude")
      ) |> 
      select(- longitude, - latitude), 
    by = join_by(station == code)
  ) |> 
  mutate(county = ifelse(duplicated(county), NA, county)) |> 
  ggplot() + 
  geom_polygon(data = usmap::us_map(regions = "counties") |> 
                 filter(full == "Minnesota"), 
               aes(x = x, y =y,  group = group), 
               color = 'black', 
               fill = "midnightblue", 
               alpha = .1) +
  geom_point(aes(county_longitude, county_latitude, label = county), 
             fill = "red", shape = 21, color = "black") + 
  geom_point(aes(station_longitude, station_latitude), color = "green3", size = 4) +
  labs(
    x = NULL, y = NULL, title = "January 1, 1950"
  ) + 
  theme(
    axis.text = element_blank()
  )

p2 <- station_to_county |> 
  filter(time == "2010-01-01") |> 
  left_join(
    minnesota_county_location_df |> 
      usmap::usmap_transform(
        input_names = c("longitude", "latitude"),
        output_names = c("county_longitude", "county_latitude")
      ) |> 
      select(- longitude, - latitude),
    by = join_by(county)
  ) |> 
  left_join(
    minnesota_station_location_df |> 
      usmap::usmap_transform(
        input_names = c("longitude", "latitude"),
        output_names = c("station_longitude", "station_latitude")
      ) |> 
      select(- longitude, - latitude), 
    by = join_by(station == code)
  ) |> 
  mutate(county = ifelse(duplicated(county), NA, county)) |> 
  ggplot() + 
  geom_polygon(data = usmap::us_map(regions = "counties") |> 
                 filter(full == "Minnesota"), 
               aes(x = x, y =y,  group = group), 
               color = 'black', 
               fill = "midnightblue", 
               alpha = .1) +
  geom_point(aes(county_longitude, county_latitude, label = county), 
             fill = "red", shape = 21, color = "black") + 
  geom_point(aes(station_longitude, station_latitude), color = "green3", size = 4) +
  labs(
    x = NULL, y = NULL, title = "January 1, 2010"
  ) + 
  theme(
    axis.text = element_blank()
  )

p1 + 
  theme_bw()  +
  theme(
    axis.text = element_blank(),
    plot.title = element_text(hjust = .5, face = "bold"),
    axis.ticks = element_blank()
  ) + p2 + 
  theme_bw() +
  theme(
    axis.text = element_blank(),
    plot.title = element_text(hjust = .5, face = "bold"),
    axis.ticks = element_blank()
  )
```


```{r}
#| label: fig-trend-yield

minnesota_production_df |> 
  filter(crop == "CORN, GRAIN", county != "OTHER (COMBINED) COUNTIES") |> 
  ggplot() + 
  geom_line(aes(year, yield, group = county), show.legend = FALSE, alpha = .3) + 
  geom_smooth(mapping = aes(year, yield, color = "Fitted line with OLS"), method = "lm") +
  labs(
    y = "Yield (Bu / Acr)",
    x = NULL,
    color = NULL
  ) + 
  theme_minimal() + 
  theme(
    legend.position = "bottom"
  )
```

```{r}
#| label: fig-trend-acres

minnesota_production_df |> 
  filter(crop == "CORN, GRAIN", county != "OTHER (COMBINED) COUNTIES") |> 
  group_by(year) |> 
  summarise(acres = sum(acres, na.rm = TRUE)) |> 
  ggplot() + 
  geom_line(aes(year, acres), show.legend = FALSE) +
  scale_y_continuous(labels = scales::number) +
  labs(
    y = "Total of harvested acres in all counties",
    x = NULL,
    color = NULL
  )
```

```{r}
#| label: fig-missingness

daily_weather_df |> 
  filter(time > "2010-01-01") |> 
  mutate(
    avg_temp = (min_temp + max_temp) / 2
  ) |> 
  sample_n(1000) |> 
  visdat::vis_miss()
```

```{r}
prediction_targets_df |> 
  sample_n(1000) |> 
  visdat::vis_miss()
```

```{r}
#| label: fig-impute-w-avg

daily_weather_df |> 
  ggplot() + 
  aes((min_temp + max_temp) / 2, avg_temp) + 
  geom_point(alpha = .2)
```

```{r}
#| label: fig-svm-grid
.read(svm_grid)

autoplot(svm_grid) + 
  theme_bw()
```


```{r}
#| label: tbl-base-learner-rs

bind_rows(testing_rs_75, testing_rs_90, testing_rs_95, testing_rs_no_wts) |> 
  group_by(gamma, engine) |> 
  filter(.metric == "rmse") |> 
  summarise(
    m = mean(.estimate),
    s = format(sd(.estimate), digits = 3)
  ) |> 
  transmute(
    Engine = nicename(engine),
    value = str_c(
      format(m, digits = 4), " (", s, ")"
    )
  ) |> 
  pivot_wider(names_from = gamma, values_fill = "-", names_prefix = "gamma = ") |> 
  rename_all(str_replace, "gamma = ", "$\\\\gamma$=") |> 
  knitr::kable(align = c("l", rep("c", 6)), escape = FALSE)
```

```{r}
#| label: tbl-ensemble-rs

bind_rows(ensemble_svm_rs, ensemble_dropsvm_rs) |> 
  group_by(svm, engine) |> 
  filter(.metric == "rmse") |> 
    summarise(
    m = mean(.estimate),
    s = format(sd(.estimate), digits = 3)
  ) |> 
  ungroup() |> 
  transmute(
    Engine = nicename(engine),
    svm = ifelse(svm, "Include", "Exclude"), 
    value = str_c(
      format(m, digits = 4), " (", s, ")"
    )
  ) |> 
  pivot_wider(names_from = svm, values_fill = "-",) |> 
  knitr::kable(align = c("l", rep("c", 6)))
```

```{r}
#| label: fig-rs-ts

bind_rows(
testing_rs_75 |> 
  filter(engine == "glmnet") |> 
  transmute(id, model = str_c(nicename(engine), " (base learner, gamma=0.75)"), .metric, .estimate),
testing_rs_no_wts |> 
  filter(engine != "glmnet", engine != "lm") |> 
  transmute(id, model = str_c(nicename(engine), " (base learner)"), .metric, .estimate),
ensemble_svm_rs |> 
  filter(engine == "glmnet") |> 
  transmute(id, model = str_c(nicename(engine), " (ensemble, include)"), .metric, .estimate)
) |> 
  filter(.metric == "rmse") |> 
  ggplot(aes(as.numeric(id), .estimate, color = model)) + 
  geom_line() + 
  geom_point() + 
  theme_minimal() + 
  theme(
    legend.position = c(.6, .6),
    legend.background = element_rect(fill = "white", color = "black")
  ) + 
  labs(
    x = "Assessment year",
    y = "RMSE",
    color = NULL
  )
  

```


